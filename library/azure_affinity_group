#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This file is part of Ansible
DOCUMENTATION = """
---
module: azure_affinity_group
short_description: Manage Azure Affinity Group
description:
  - Manage Manage Azure Affinity Group
  - Returns affinity specific group.
version_added: "1.6"
requirements: [ "azure" ]
author: Herve Leclerc
options:
  state:
    description:
      - C(absent) or C(present) are idempotent actions that will create or destroy an affinity group
    choices: choices: ['present', 'absent', 'list', 'detail']
    required: true
  name:
    description:
      - The affinity group identifier
    required: true
  region:
    description:
      - The region of the affinity group
    required: true
"""
EXAMPLES = """
- local_action:
    module: azure_affinity_group
    name: "myaffinity"
    state: present
    region: "West Europe"

"""

import sys
import os
import time
import json

try:
    from azure import *
    from azure.servicemanagement import *
except ImportError:
    print "failed=True msg='azure required for this module'"
    sys.exit(1)

def json_format_dict(self, data, pretty=False):
        """Converts a dict to a JSON object and dumps it as a formatted string."""
        if pretty:
            return json.dumps(data, sort_keys=True, indent=2)
        else:
            return json.dumps(data)

def wait_for_completion(promise,sms):
	if not promise: return
	while True:
		time.sleep(5)
		operation_result = sms.get_operation_status(promise.request_id)
		print('  ' + operation_result.status)
		if (operation_result.status == "Succeeded"):
			return

def main():
   module = AnsibleModule(
        argument_spec = dict(
            state = dict(choices=['list', 'present', 'absent', 'detail'], default='list'),
            subscription_id = dict(type='str'),
            certificate_path = dict(type='str'),
            name = dict(type='str',default=''),
            location = dict(type='str'),
            label = dict(type='str'),
            desc = dict(type='str'),
        ),
        required_together = (
            ['id', 'cert'],
        ),
    )

   params = module.params

   state=params['state']
   subscription_id=params['subscription_id']
   certificate_path=params['certificate_path']
   name=params['name']
   location=params['location']
   label=params['label']
   desc=params['desc']


   try:
      sms = ServiceManagementService(subscription_id, certificate_path)
   except:
      module.fail_json(msg='unable to acces to azure check subscription_id/certificate_path')

   locations = sms.list_locations()
   affinity_groups=sms.list_affinity_groups()


   if state == 'list':
       ag=[]
       for affinity_group in affinity_groups:
          ag.append(affinity_group.name)
       module.exit_json(changed=True, affinity_groups=ag)

   if state == 'detail':
       for affinity_group in affinity_groups:
           if name == affinity_group.name:
               properties=sms.get_affinity_group_properties(name)
               properties_json={
                   'description' : properties.description,
                   'label': properties.label,
                   'name': properties.name,
                   'capabilities': properties.capabilities
                   #'hosted_services': properties.hosted_services,
                   #'storage_services': properties.storage_services
               }

               module.exit_json(changed=True, affinity_groups=properties_json)
       module.exit_json(changed=False, msg="Affinity group %s does not exist" % name)

   if state == 'present':
       for affinity_group in affinity_groups:
           if name == affinity_group.name:
               module.exit_json(changed=False, msg="Affinity group %s already exist" % name, name=name)
       res=sms.create_affinity_group(name, label, location, desc)
       wait_for_completion(res,sms)

   if state == 'absent':
       for affinity_group in affinity_groups:
           if name == affinity_group.name:
               res=sms.delete_affinity_group(name)
               wait_for_completion(res,sms)
               module.exit_json(changed=True, result='Deleted', name=name)

       module.exit_json(changed=False, msg="Affinity group %s does not exist" % name)


   module.exit_json(changed=True, result=True, name=name)

# import module snippets
from ansible.module_utils.basic import *

main()
